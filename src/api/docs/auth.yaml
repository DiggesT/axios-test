openapi: 3.0.3
info:
  title: auth
  version: 0.0-d26424a-SNAPSHOT
paths:
  /api/v1/auth/login:
    post:
      operationId: postApiV1AuthLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          description: ''
          headers:
            Set-Cookie:
              required: false
              schema:
                type: array
                items:
                  type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedIn'
        '400':
          description: 'Invalid value for: body'
          content:
            text/plain:
              schema:
                type: string
        '401':
          description: No authentication provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Authentication provided, but not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
  /api/v1/auth/whoami:
    get:
      operationId: getApiV1AuthWhoami
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoggedIn'
        '401':
          description: No authentication provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '403':
          description: Authentication provided, but not enough permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
      security:
      - httpAuth: []
components:
  schemas:
    AuthError:
      oneOf:
      - $ref: '#/components/schemas/InvalidLogin'
      - $ref: '#/components/schemas/ServerError'
      discriminator:
        propertyName: kind
        mapping:
          invalid_login: '#/components/schemas/InvalidLogin'
          server_error: '#/components/schemas/ServerError'
    Contact:
      required:
      - value
      - kind
      type: object
      properties:
        value:
          type: string
        kind:
          $ref: '#/components/schemas/Kind'
    Currency:
      type: string
      enum:
      - CNY
      - EUR
      - RUB
      - USD
    InvalidLogin:
      required:
      - reason
      - kind
      type: object
      properties:
        reason:
          type: string
        kind:
          type: string
          enum:
          - invalid_login
    Kind:
      type: string
      enum:
      - email
      - phone
    Language:
      type: string
      enum:
      - en
      - ru
    LoggedIn:
      required:
      - user
      - preferences
      - token
      - default
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        preferences:
          $ref: '#/components/schemas/PreferencesWithMeta'
        token:
          type: string
        default:
          $ref: '#/components/schemas/PreferencesStatic'
    Login:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    Meta:
      required:
      - id
      - createdAt
      - createdBy
      - rowVersion
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
        createdBy:
          type: string
          format: uuid
        rowVersion:
          type: integer
          format: int32
        rowStatus:
          $ref: '#/components/schemas/RowStatus'
        updatedAt:
          type: string
        updatedBy:
          type: string
          format: uuid
    Meta1:
      required:
      - rowVersion
      type: object
      properties:
        rowVersion:
          type: integer
          format: int32
        updatedAt:
          type: string
        updatedBy:
          type: string
          format: uuid
    Person:
      required:
      - firstName
      - lastName
      type: object
      properties:
        firstName:
          type: string
        middleName:
          type: string
        lastName:
          type: string
        birthday:
          type: string
          format: date
        contacts:
          type: array
          items:
            $ref: '#/components/schemas/Contact'
    Preferences:
      required:
      - userId
      - timezone
      - language
      type: object
      properties:
        userId:
          type: string
          format: uuid
        timezone:
          type: string
        language:
          $ref: '#/components/schemas/Language'
    PreferencesStatic:
      required:
      - currency
      type: object
      properties:
        currency:
          $ref: '#/components/schemas/Currency'
    PreferencesWithMeta:
      required:
      - meta
      - origin
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/Meta1'
        origin:
          $ref: '#/components/schemas/Preferences'
    Role:
      type: string
      enum:
      - admin
      - guest
      - moderator
      - user
    RowStatus:
      type: string
      enum:
      - deleted
    ServerError:
      required:
      - reason
      - kind
      type: object
      properties:
        reason:
          type: string
        kind:
          type: string
          enum:
          - server_error
    User:
      required:
      - userMeta
      - email
      - role
      - person
      type: object
      properties:
        userMeta:
          $ref: '#/components/schemas/Meta'
        email:
          type: string
        role:
          $ref: '#/components/schemas/Role'
        position:
          type: string
        person:
          $ref: '#/components/schemas/Person'
  securitySchemes:
    httpAuth:
      type: http
      scheme: bearer
