/**
 * Generated by orval v6.12.1 üç∫
 * Do not edit manually.
 * auth
 * OpenAPI spec version: 0.0-d26424a-SNAPSHOT
 */
import {
  useQuery,
  useMutation
} from '@tanstack/react-query'
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey
} from '@tanstack/react-query'
import { axiosAuth } from '../mutator/axios-auth';
import type { ErrorType } from '../mutator/axios-auth';
export type ServerErrorKind = typeof ServerErrorKind[keyof typeof ServerErrorKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ServerErrorKind = {
  server_error: 'server_error',
} as const;

export interface ServerError {
  reason: string;
  kind: ServerErrorKind;
}

export type RowStatus = typeof RowStatus[keyof typeof RowStatus];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RowStatus = {
  deleted: 'deleted',
} as const;

export type Role = typeof Role[keyof typeof Role];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Role = {
  admin: 'admin',
  guest: 'guest',
  moderator: 'moderator',
  user: 'user',
} as const;

export interface PreferencesStatic {
  currency: Currency;
}

export interface Preferences {
  userId: string;
  timezone: string;
  language: Language;
}

export interface Person {
  firstName: string;
  middleName?: string;
  lastName: string;
  birthday?: string;
  contacts?: Contact[];
}

export interface Meta1 {
  rowVersion: number;
  updatedAt?: string;
  updatedBy?: string;
}

export interface PreferencesWithMeta {
  meta: Meta1;
  origin: Preferences;
}

export interface Meta {
  id: string;
  createdAt: string;
  createdBy: string;
  rowVersion: number;
  rowStatus?: RowStatus;
  updatedAt?: string;
  updatedBy?: string;
}

export interface User {
  userMeta: Meta;
  email: string;
  role: Role;
  position?: string;
  person: Person;
}

export interface Login {
  email: string;
  password: string;
}

export interface LoggedIn {
  user: User;
  preferences: PreferencesWithMeta;
  token: string;
  default: PreferencesStatic;
}

export type Language = typeof Language[keyof typeof Language];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Language = {
  en: 'en',
  ru: 'ru',
} as const;

export type Kind = typeof Kind[keyof typeof Kind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Kind = {
  email: 'email',
  phone: 'phone',
} as const;

export type InvalidLoginKind = typeof InvalidLoginKind[keyof typeof InvalidLoginKind];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const InvalidLoginKind = {
  invalid_login: 'invalid_login',
} as const;

export interface InvalidLogin {
  reason: string;
  kind: InvalidLoginKind;
}

export type Currency = typeof Currency[keyof typeof Currency];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Currency = {
  CNY: 'CNY',
  EUR: 'EUR',
  RUB: 'RUB',
  USD: 'USD',
} as const;

export interface Contact {
  value: string;
  kind: Kind;
}

export type AuthError = InvalidLogin | ServerError;




// eslint-disable-next-line
  type SecondParameter<T extends (...args: any) => any> = T extends (
  config: any,
  args: infer P,
) => any
  ? P
  : never;

export const postApiV1AuthLogin = (
    login: Login,
 options?: SecondParameter<typeof axiosAuth>,) => {
      return axiosAuth<LoggedIn>(
      {url: `/api/v1/auth/login`, method: 'post',
      headers: {'Content-Type': 'application/json', },
      data: login
    },
      options);
    }
  


    export type PostApiV1AuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1AuthLogin>>>
    export type PostApiV1AuthLoginMutationBody = Login
    export type PostApiV1AuthLoginMutationError = ErrorType<string | AuthError>

    export const usePostApiV1AuthLogin = <TError = ErrorType<string | AuthError>,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiV1AuthLogin>>, TError,{data: Login}, TContext>, request?: SecondParameter<typeof axiosAuth>}
) => {
      const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1AuthLogin>>, {data: Login}> = (props) => {
          const {data} = props ?? {};

          return  postApiV1AuthLogin(data,requestOptions)
        }

        

      return useMutation<Awaited<ReturnType<typeof postApiV1AuthLogin>>, TError, {data: Login}, TContext>(mutationFn, mutationOptions);
    }
    
export const getApiV1AuthWhoami = (
    
 options?: SecondParameter<typeof axiosAuth>,signal?: AbortSignal
) => {
      return axiosAuth<LoggedIn>(
      {url: `/api/v1/auth/whoami`, method: 'get', signal
    },
      options);
    }
  

export const getGetApiV1AuthWhoamiQueryKey = () => [`/api/v1/auth/whoami`];

    
export type GetApiV1AuthWhoamiQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1AuthWhoami>>>
export type GetApiV1AuthWhoamiQueryError = ErrorType<AuthError>

export const useGetApiV1AuthWhoami = <TData = Awaited<ReturnType<typeof getApiV1AuthWhoami>>, TError = ErrorType<AuthError>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiV1AuthWhoami>>, TError, TData>, request?: SecondParameter<typeof axiosAuth>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiV1AuthWhoamiQueryKey();

  


  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1AuthWhoami>>> = ({ signal }) => getApiV1AuthWhoami(requestOptions, signal);


  

  const query = useQuery<Awaited<ReturnType<typeof getApiV1AuthWhoami>>, TError, TData>({ queryKey, queryFn,   staleTime: 10000,  ...queryOptions}) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
}


